angolo(100).
angolo(150).
angolo(200).
angolo(250).
angolo(300).
angolo(350).
angolo(400).
angolo(450).
angolo(500).


%occupato(150,300,1).
%occupato(200,350,1).
%occupato(250,300,1).

%occupato(200,300,0).


%colore 0 rosso --- 1 blu --- 2 nessun colore perche non è ancora posizionata nessuna pedina!

%decido in quale casella mi devo spostare
addB(X,Y)|noAddB(X,Y) :- angolo(X), angolo(Y).


%non posso aggiungere pedine in una casella che non è libera
:- addB(X,Y), occupato(X,Y,C1).

%deve nascere esattamente un addB 
:- #count{X,Y : addB(X,Y)}<1.
:- #count{X,Y : addB(X,Y)}>1.

numeroPedinePresenti(C):- #count{X,Y : occupato(X,Y,_)}= C.

%non posso aggiungere due pedine blu "nello stesso momento"
%:- addB(X1,Y1), addB(X2,Y2), X1!=X2.
%:- addB(X1,Y1), addB(X2,Y2), Y1!=Y2.
%:- addB(X1,Y1), addB(X2,Y2), X1!=X2, X1!=X2.

%NON POSSO SUICIDARMI
:- addB(X,Y), occupato(X1,Y,0), occupato(X2,Y,0), occupato(X,Y1,0), occupato(X,Y2,0), X1=X-50, Y1=Y-50, X2=X+50, Y2=Y+50, numeroPedinePresenti(C), C<81.


%se ce la pedina avversaria(nera) che è accerchiada da 3 bianchi cerco di mettere la 4 pedina cosi da ucciderla!
numeroPedinePresenti(C):- #count{X,Y : occupato(X,Y,_)}= C.
:- noAddB(X,Y1), occupato(X,Y,0), occupato(X1,Y,1), X1=X-50, occupato(X2,Y,1), X2=X+50,  occupato(X,Y2,1), Y2= Y+50, Y1 = Y-50, numeroPedinePresenti(C),C < 81.  
:- noAddB(X,Y1), occupato(X,Y,0), occupato(X1,Y,1), X1=X-50, occupato(X2,Y,1), X2=X+50,  occupato(X,Y2,1), Y2= Y-50, Y1 = Y+50, numeroPedinePresenti(C),C < 81.  
:- noAddB(X1,Y), occupato(X,Y,0), occupato(X,Y1,1), Y1=Y-50, occupato(X2,Y,1), X2=X-50,  occupato(X,Y2,1), Y2= Y+50, X1 = X+50, numeroPedinePresenti(C),C < 81. 
:- noAddB(X1,Y), occupato(X,Y,0), occupato(X,Y1,1), Y1=Y-50, occupato(X2,Y,1), X2=X+50,  occupato(X,Y2,1), Y2= Y+50, X1 = X-50, numeroPedinePresenti(C),C < 81. 

%se ce la pedina avversaria(nera) gli manca una mossa per uccidermi cerco di evitarlo!
nemiciVicini(X,Y,S):- occupato(X,Y,1), #count{Y1 : occupato(X,Y1,0),Y1=Y-50} = C1, #count{X2 : occupato(X2,Y,0), X2=X+50} = C2,  #count{Y2 : occupato(X,Y2,0), Y2= Y+50} = C3,  #count{X1 : occupato(X,X1,0),X1 = X-50} = C4, S=C1+C3+C3+C4.
%amiciVicini(X,Y):- occupato(X,Y,1), #count{Y1 : occupato(X,Y1,1),Y1=Y-50} = C1, #count{X2 : occupato(X2,Y,1), X2=X+50} = C2,  #count{Y2 : occupato(X,Y2,1), Y2= Y+50} = C3,  #count{X1 : occupato(X,X1,1),X1 = X-50} = C4, S=C1+C3+C3+C4.
:~ not occupato(X1,Y,1), not add(X1,Y), nemiciVicini(X,Y,S), S>2, X1=X+50. [1@S]
:~ not occupato(X1,Y,1),not add(X1,Y), nemiciVicini(X,Y,S), S>2, X1=X-50. [1@S]
:~ not occupato(X,Y,1),not add(X,Y1), nemiciVicini(X,Y,S), S>2, Y1=Y+50. [1@S]
:~ not occupato(X,Y1,1),not add(X,Y1), nemiciVicini(X,Y,S), S>2, Y1=Y-50. [1@S]

%quelli che vanno eliminati
%addInP(X,Y,C):- C!=CO1, occupato(X,Y,C), occupato(X1,Y,CO1), occupato(X2,Y,CO1), occupato(X,Y1,CO1), occupato(X,Y2,CO1), X1=X-50, Y1=Y-50, X2=X+50, Y2=Y+50.
%addInP(X,Y,CO1):- addB(X,Y), occupato(X1,Y,CO1), occupato(X2,Y,CO1), occupato(X,Y1,CO1), occupato(X,Y2,CO1), X1=X-50, Y1=Y-50, X2=X+50, Y2=Y+50.

%:~ addInP(X,Y,1). [1@3]
%addInP(X,Y,C):- occupato(X,Y,C), occupato(X1,Y,CO1), X!=X1, C!=C1.


